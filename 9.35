/*Дана квадратная матрица целых чисел. Элементы с нулевыми значениями
могут образовывать области прямоугольной формы. Определите
максимальную площадь такой области (произведение к-ва элементов,
образующих стороны прямоугольной области).*/

#include <iostream>
#include <cstdlib>
using namespace std;

int main() {
setlocale(LC_ALL, "Russian");

int n, k, l, y1, x1, y2, x2, s1, s2, s3, s4, s, y3, x3, y4, x4, max;
n = 8;
s = 1;
s1=s2=s3=s4=0;
k=0;

int m[n][n] = {{1,1,4,1,1,0,1,1},{1,1,1,1,1,0,1,1},{1,0,0,0,0,0,1,1},{1,0,1,0,0,1,1,1},{1,0,0,0,0,1,1,1},{1,0,1,1,0,0,1,1},{1,1,1,1,1,1,1,1},{1,1,1,1,1,1,1,1}};
int m1[n*n] = {};

for(int i = 0; i<n; i++){    //красивенько показываю циферки в виде матрицы
	for(int j = 0; j<n; j++){
		if(j==n-1){
			cout << m[i][j] <<endl;
		}
		else {
			cout << m[i][j] <<" ";
		}
	}
}


for(int i = 0; i<n; i++){
	for(int j = 0; j<n; j++){
		s1=0; s2=0; s3=0; s4=0;  //сумма нуликов с четырех сторон, начинаю с s2 - левая часть прямоугольника, s3 - нижняя, s4 - правая, s1 верхняя
		if(m[i][j]==0){
			y1 = i; //это типа строка массива
			x1 = j; //это типа столбец массива
			l = y1+1;  //переменная, которая помогает двигаться по прямоугольнику))0
			
			while(m[l][x1]==0){
				s2++;
				y2=l;
				x2=x1;
				l++;
			}
			
			if(s2!=0){  
				l=x2+1;
				if(m[y2][l]!=0){   //это условие для того чтоб не включать лишние нулики
					while(m[y2][l]!=0 && y2>1){
						y2=y2-1;
						s2=s2-1;
					}
				}
				if(m[y2][l]==0){
					while(m[y2][l]==0){
						s3++; 
						x3=l; 
						y3=y2;	
						l++;	
					}
				}
				
			}
			if(s3!=0){
				l=y3-1;
				if(m[l][x3]!=0){
					while(m[l][x3]!=0 && x3>x2+1){
						x3=x3-1;
						s3=s3-1;				
					}
				}
				if(m[l][x3]==0){
					while(m[l][x3]==0 && l>=0){
						s4++; 
						x4=x3; 
						y4=l;	
						l--;	
					}
				}
				


			}
			if(s4!=0){
				l=x4-1;
				if(m[y4][l]!=0){
					while(m[y4][l]!=0 && y4<y3-1){
						y4=y4+1;
						s4=s4-1;
					}	
				}
				
				if(m[y4][l]==0 && s2==s4){
					while(m[y4][l]==0 && x1<=l){
						s1++;
						l--;
					}					
				}	
			
		
			}	
			if(s1!=0 && s1==s3){
				s1=s1+1;
				s2=s2+1;
				s=s1*s2;
				m1[k]=s;
				k++;
			}
			
		
		}
		
		
	}

}
if(k>0){
	max = m1[0];
	for(int i = 0; i<k; i++){
		if(m1[i]>max){
			max = m1[i];
		}
	}
cout<<"Максимальная площадь: "<<max<<endl;
}
}
